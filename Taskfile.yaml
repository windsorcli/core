version: '3'

tasks:
  scan:
    desc: Scan for security vulnerabilities
    silent: true
    cmds:
      - cmd: source .venv/bin/activate && checkov -d {{.CLI_ARGS | default "terraform/"}} 2>/dev/null

  terraform-test:
    desc: Run Terraform tests (all or specific module)
    silent: true
    cmds:
      - cmd: |
          MODULE={{.CLI_ARGS | default "terraform"}}
          if [ -d "$MODULE" ]; then
            # Create a temporary directory for test results
            TEMP_DIR=$(mktemp -d)
            # Find all test files and run them in parallel
            find "$MODULE" -type f -name '*.tftest.hcl' | while read testfile; do
              testdir=$(dirname "$testfile")
              (
                cd "$testdir" && \
                echo "Running tests in $testdir..." && \
                terraform init -input=false -reconfigure && \
                terraform test || \
                echo "FAILED: $testfile" >> "$TEMP_DIR/failures"
              ) &
            done
            # Wait for all background jobs to complete
            wait
            # Check if any tests failed
            if [ -f "$TEMP_DIR/failures" ]; then
              echo "Test failures:"
              cat "$TEMP_DIR/failures"
              rm -rf "$TEMP_DIR"
              exit 1
            fi
            rm -rf "$TEMP_DIR"
          else
            echo "Module path '$MODULE' does not exist."
            exit 1
          fi

  test:
    desc: Run all tests
    deps: [terraform-test]

  fmt:
    desc: Check Terraform formatting
    silent: true
    cmds:
      - cmd: terraform fmt -recursive

  docs:
    desc: Generate Terraform documentation
    silent: true
    cmds:
      - cmd: |
          find terraform -type d -exec test -e '{}/main.tf' -a -e '{}/variables.tf' \; -print | while read -r dir; do
            if [[ "$dir" == *"/modules/"* ]]; then
              continue
            fi
            echo "Generating docs for $dir"
            docker run --rm -v "$(pwd):/src" -w "/src/$dir" quay.io/terraform-docs/terraform-docs:0.20.0 markdown table --output-file README.md --output-mode inject .
          done

  helm-test:
    desc: Lint and render Helm chart with full CI values, comparing with expected output
    silent: true
    cmds:
      - cmd: |
          for chart in charts/*/; do
            if [ -f "${chart}Chart.yaml" ]; then
              echo "Linting chart: $chart"
              helm lint "$chart" || exit 1
              if [ -f "${chart}ci/values.yaml" ]; then
                echo "Rendering chart: $chart with ci/values.yaml"
                rendered=$(helm template "$chart" -f "${chart}ci/values.yaml" --debug)
                if [ -f "${chart}ci/expected.yaml" ]; then
                  echo "Comparing rendered output with ci/expected.yaml"
                  diff <(echo "$rendered") "${chart}ci/expected.yaml" || exit 1
                fi
              fi
            fi
          done
