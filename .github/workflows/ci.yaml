name: CI

on:
  push:
    branches:
      - main
      - windsor-up-test
  pull_request:
    branches:
      - main

jobs:
  # Blueprint Checks
  checks:
    uses: windsorcli/blueprint/.github/workflows/checks.yaml@37a5386198caa29f87531d09003512adc5407702 # v0.1.0

  checkov:
    uses: windsorcli/blueprint/.github/workflows/checkov.yaml@37a5386198caa29f87531d09003512adc5407702 # v0.1.0

  ci:
    runs-on: ubuntu-latest

    env:
      KUBECONFIG: ${{ github.workspace }}/contexts/local/.kube/config
      TALOSCONFIG: ${{ github.workspace }}/contexts/local/.talos/config
      PRIVATE_DOMAIN_NAME: private.test
      DNS_SERVER_IP: "10.5.255.200"
      windsorcli_version: "v0.5.1"

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Create .docker-cache directory
        run: mkdir -p .docker-cache

      - name: Cache .docker-cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: .docker-cache
          key: docker-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: docker-cache-${{ runner.os }}-

      # Install Aqua
      - name: Install Aqua on Linux/macOS
        uses: aquaproj/aqua-installer@e2d0136abcf70b7a2f6f505720640750557c4b33 # v3.1.1
        with:
          aqua_version: v2.28.0
          
      - name: Set aqua path on Linux/macOS
        run: |
          echo "${AQUA_ROOT_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua}/bin" >> $GITHUB_PATH

      # Install tools
      - name: Install tools
        run: |
          aqua install     

      # Install Windsor CLI
      - name: Install Windsor CLI
        uses: windsorcli/action/.github/actions/windsorcli@078842a08b468bd2278563bbc929e9d968095988 # v0.2.0
        with:
          version: ${{ env.windsorcli_version }}
          install_folder: ${{ github.workspace }}/bin
          context: local

      # Windsor Up
      - name: Windsor Up on Linux/macOS
        run: |
          # Set WINDSOR_PROJECT_ROOT
          export WINDSOR_PROJECT_ROOT="${{ github.workspace }}"

          # Windsor Init
          windsor init local

          # Windsor Up
          windsor context get
          windsor up --install --verbose

      # Windsor Down
      - name: Windsor Down on Linux/macOS
        run: |
          # Set WINDSOR_PROJECT_ROOT
          export WINDSOR_PROJECT_ROOT="${{ github.workspace }}"

          # Windsor Down
          windsor down --clean

      # Docker Clean
      - name: Docker Clean on Linux/macOS
        run: |
          # Check for running containers and remove them
          containers=$(docker ps -aq)
          if [ -n "$containers" ]; then
            echo "Removing containers..."
            docker rm -f "$containers"
          else
            echo "No containers to remove."
          fi

          # Prune system, volumes, and networks
          echo "Pruning Docker system, volumes, and networks..."
          docker system prune -a -f
          docker volume prune -f
          docker network prune -f
          docker system prune -a -f


      # Windsor Clean
      - name: Windsor Clean on Linux/macOS
        run: |
          if [ "$GITHUB_WORKSPACE" == "/" ]; then
            echo "Error: GITHUB_WORKSPACE is the root folder. Aborting cleanup."
            exit 1
          fi

          if [ ! -d "$GITHUB_WORKSPACE" ]; then
            echo "Error: GITHUB_WORKSPACE is not a directory. Aborting cleanup."
            exit 1
          fi
          sudo rm -rf $GITHUB_WORKSPACE/.windsor
          sudo rm -rf $GITHUB_WORKSPACE/*.*
          sudo rm -rf $GITHUB_WORKSPACE/terraform
          sudo rm -rf $GITHUB_WORKSPACE/kustomize
          rm -rf ./.yamllint
          rm -rf ./.gitignore
          rm -rf ./.editorconfig
          rm -rf ./LICENSE

      # Remove Tools
      - name: Remove tools
        run: |
          aqua rm --all 2>&1
      
      # Check if any files still exist in the workspace and report them if found (Linux/macOS)
      - name: Check for remaining files on Linux/macOS
        run: |
          remainingFiles=$(find . -maxdepth 1 -type f)
          if [ -n "$remainingFiles" ]; then
            echo "Error: Found files in the workspace that should be removed:"
            echo "$remainingFiles"
            exit 1
          fi
