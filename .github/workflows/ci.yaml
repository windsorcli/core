name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

permissions:
  contents: write
  security-events: write
  checks: write
  packages: write

env:
  WINDSOR_PROJECT_ROOT: ${{ github.workspace }}
  DOCKER_HOST: unix:///var/run/docker.sock
  # renovate: datasource=github-releases depName=docker-compose package=docker/compose
  DOCKER_COMPOSE_VERSION: v2.39.4
  # renovate: datasource=github-releases depName=troubleshoot package=replicatedhq/troubleshoot
  SUPPORT_BUNDLE_VERSION: v0.122.0

jobs:
  code-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Docker Compose
        run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
        continue-on-error: false

      # This module is not loaded by default and is required to run Kubernetes on Docker
      - name: Load br_netfilter kernel module
        run: |
          sudo modprobe br_netfilter
          echo "1" | sudo tee /proc/sys/net/bridge/bridge-nf-call-iptables
          echo "1" | sudo tee /proc/sys/net/bridge/bridge-nf-call-ip6tables

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: '3.x'

      - name: Run yamllint
        run: |
          pip install yamllint
          yamllint .

      - name: Run shellcheck
        run: |
          sudo apt-get install -y shellcheck
          shell_files=$(find . -name "*.sh" -print)
          if [ -n "$shell_files" ]; then
            echo "$shell_files" | xargs shellcheck
          else
            echo "No shell scripts found to check"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          # renovate: datasource=github-releases depName=terraform package=hashicorp/terraform
          terraform_version: 1.13.3

      - name: Run terraform fmt
        run: terraform fmt -check -recursive

      - name: Run Terraform Tests
        run: |
          find terraform -type f -name '*.tftest.hcl' | while read testfile; do
            testdir=$(dirname "$testfile")
            (cd "$testdir" && terraform init -input=false && terraform test)
          done

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@68260132005eaae0e6f84c7a73cc3b1532f678bf # v12.3058.0
        with:
          directory: ./terraform
          output_format: cli,sarif
          output_file_path: console,results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@3599b3baa15b485a2e49ef411a7a4bb2452e7f93 # v3.30.5
        with:
          sarif_file: results.sarif

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Docker Compose
        run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
        continue-on-error: false

      - name: Load br_netfilter kernel module
        run: |
          sudo modprobe br_netfilter
          echo "1" | sudo tee /proc/sys/net/bridge/bridge-nf-call-iptables
          echo "1" | sudo tee /proc/sys/net/bridge/bridge-nf-call-ip6tables

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          # renovate: datasource=github-releases depName=terraform package=hashicorp/terraform
          terraform_version: 1.13.3

      - name: Setup kubectl
        uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede # v4.0.1
        with:
          # renovate: datasource=github-releases depName=kubectl package=kubernetes/kubectl
          version: v1.33.0

      - name: Install support-bundle CLI
        run: |
          cd "$(mktemp -d)" &&
          curl -fsSLO "https://github.com/replicatedhq/troubleshoot/releases/download/${SUPPORT_BUNDLE_VERSION}/support-bundle_linux_amd64.tar.gz" &&
          tar xzf support-bundle_linux_amd64.tar.gz &&
          sudo install -m 0755 -o root -g root support-bundle /usr/local/bin/ &&
          cd - &&
          rm -rf "$OLDPWD" &&
          support-bundle version

      - name: Create bundle directory
        run: mkdir -p support-bundles

      - name: Install Windsor CLI
        uses: windsorcli/action@v0.5.0
        with:
          ref: v0.7.1
          context: local

      - name: Create .docker-cache directory
        run: mkdir -p .windsor/.docker-cache

      - name: Cache .docker-cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: .windsor/.docker-cache
          key: docker-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: docker-cache-${{ runner.os }}-

      - name: Windsor Up
        run: |
          windsor init local --set dns.enabled=false --reset
          windsor up --install --verbose --wait

      - name: Collect Windsor State
        if: always()
        run: |
          tar --exclude='.docker-cache' --exclude='.terraform' -czf support-bundles/windsor-state.tar.gz contexts/local .windsor

      - name: Collect support bundle
        if: always()
        run: |
          support-bundle --interactive=false --output=support-bundles/bundle-${{ github.workflow }}-${{ github.run_id }}-${{ github.run_number }} .github/support-bundle.yaml

      - name: Upload support bundle
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: support-bundle-local
          path: support-bundles/
          retention-days: 30

      - name: Windsor Down
        if: always()
        run: |
          windsor down

  publish:
    name: Publish OCI Package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Windsor CLI
        uses: windsorcli/action@main
        with:
          ref: main
          context: local

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to OCI Registry
        env:
          TAG: ${{ github.ref_name }}
        run: |
          windsor push oci://ghcr.io/windsorcli/core:${TAG}

      - name: Publish Latest Tag
        if: github.ref == 'refs/heads/main'
        env:
          TAG: latest
        run: |
          windsor push oci://ghcr.io/windsorcli/core:${TAG}
